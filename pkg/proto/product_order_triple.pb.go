// Code generated by protoc-gen-go-triple. DO NOT EDIT.
// versions:
// - protoc-gen-go-triple v1.0.8
// - protoc             v3.21.12
// source: product_order.proto

package proto

import (
	context "context"
	protocol "dubbo.apache.org/dubbo-go/v3/protocol"
	dubbo3 "dubbo.apache.org/dubbo-go/v3/protocol/dubbo3"
	invocation "dubbo.apache.org/dubbo-go/v3/protocol/invocation"
	grpc_go "github.com/dubbogo/grpc-go"
	codes "github.com/dubbogo/grpc-go/codes"
	metadata "github.com/dubbogo/grpc-go/metadata"
	status "github.com/dubbogo/grpc-go/status"
	common "github.com/dubbogo/triple/pkg/common"
	constant "github.com/dubbogo/triple/pkg/common/constant"
	triple "github.com/dubbogo/triple/pkg/triple"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc_go.SupportPackageIsVersion7

// ProductInfoClient is the client API for ProductInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductInfoClient interface {
	Get(ctx context.Context, in *GetProductInfoRequest, opts ...grpc_go.CallOption) (*GetProductInfoDetailResponse, common.ErrorWithAttachment)
	Query(ctx context.Context, in *QueryProductInfoRequest, opts ...grpc_go.CallOption) (*QueryProductInfoResponse, common.ErrorWithAttachment)
}

type productInfoClient struct {
	cc *triple.TripleConn
}

type ProductInfoClientImpl struct {
	Get   func(ctx context.Context, in *GetProductInfoRequest) (*GetProductInfoDetailResponse, error)
	Query func(ctx context.Context, in *QueryProductInfoRequest) (*QueryProductInfoResponse, error)
}

func (c *ProductInfoClientImpl) GetDubboStub(cc *triple.TripleConn) ProductInfoClient {
	return NewProductInfoClient(cc)
}

func (c *ProductInfoClientImpl) XXX_InterfaceName() string {
	return "proto.ProductInfo"
}

func NewProductInfoClient(cc *triple.TripleConn) ProductInfoClient {
	return &productInfoClient{cc}
}

func (c *productInfoClient) Get(ctx context.Context, in *GetProductInfoRequest, opts ...grpc_go.CallOption) (*GetProductInfoDetailResponse, common.ErrorWithAttachment) {
	out := new(GetProductInfoDetailResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Get", in, out)
}

func (c *productInfoClient) Query(ctx context.Context, in *QueryProductInfoRequest, opts ...grpc_go.CallOption) (*QueryProductInfoResponse, common.ErrorWithAttachment) {
	out := new(QueryProductInfoResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Query", in, out)
}

// ProductInfoServer is the server API for ProductInfo service.
// All implementations must embed UnimplementedProductInfoServer
// for forward compatibility
type ProductInfoServer interface {
	Get(context.Context, *GetProductInfoRequest) (*GetProductInfoDetailResponse, error)
	Query(context.Context, *QueryProductInfoRequest) (*QueryProductInfoResponse, error)
	mustEmbedUnimplementedProductInfoServer()
}

// UnimplementedProductInfoServer must be embedded to have forward compatible implementations.
type UnimplementedProductInfoServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedProductInfoServer) Get(context.Context, *GetProductInfoRequest) (*GetProductInfoDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProductInfoServer) Query(context.Context, *QueryProductInfoRequest) (*QueryProductInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (s *UnimplementedProductInfoServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedProductInfoServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedProductInfoServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &ProductInfo_ServiceDesc
}
func (s *UnimplementedProductInfoServer) XXX_InterfaceName() string {
	return "proto.ProductInfo"
}

func (UnimplementedProductInfoServer) mustEmbedUnimplementedProductInfoServer() {}

// UnsafeProductInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductInfoServer will
// result in compilation errors.
type UnsafeProductInfoServer interface {
	mustEmbedUnimplementedProductInfoServer()
}

func RegisterProductInfoServer(s grpc_go.ServiceRegistrar, srv ProductInfoServer) {
	s.RegisterService(&ProductInfo_ServiceDesc, srv)
}

func _ProductInfo_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Get", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductInfo_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Query", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

// ProductInfo_ServiceDesc is the grpc_go.ServiceDesc for ProductInfo service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductInfo_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "proto.ProductInfo",
	HandlerType: (*ProductInfoServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ProductInfo_Get_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _ProductInfo_Query_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "product_order.proto",
}

// ProductOrderClient is the client API for ProductOrder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductOrderClient interface {
	GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc_go.CallOption) (*GetProductOrderDetailResponse, common.ErrorWithAttachment)
}

type productOrderClient struct {
	cc *triple.TripleConn
}

type ProductOrderClientImpl struct {
	GetDetail func(ctx context.Context, in *GetDetailRequest) (*GetProductOrderDetailResponse, error)
}

func (c *ProductOrderClientImpl) GetDubboStub(cc *triple.TripleConn) ProductOrderClient {
	return NewProductOrderClient(cc)
}

func (c *ProductOrderClientImpl) XXX_InterfaceName() string {
	return "proto.ProductOrder"
}

func NewProductOrderClient(cc *triple.TripleConn) ProductOrderClient {
	return &productOrderClient{cc}
}

func (c *productOrderClient) GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc_go.CallOption) (*GetProductOrderDetailResponse, common.ErrorWithAttachment) {
	out := new(GetProductOrderDetailResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetDetail", in, out)
}

// ProductOrderServer is the server API for ProductOrder service.
// All implementations must embed UnimplementedProductOrderServer
// for forward compatibility
type ProductOrderServer interface {
	GetDetail(context.Context, *GetDetailRequest) (*GetProductOrderDetailResponse, error)
	mustEmbedUnimplementedProductOrderServer()
}

// UnimplementedProductOrderServer must be embedded to have forward compatible implementations.
type UnimplementedProductOrderServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedProductOrderServer) GetDetail(context.Context, *GetDetailRequest) (*GetProductOrderDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (s *UnimplementedProductOrderServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedProductOrderServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedProductOrderServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &ProductOrder_ServiceDesc
}
func (s *UnimplementedProductOrderServer) XXX_InterfaceName() string {
	return "proto.ProductOrder"
}

func (UnimplementedProductOrderServer) mustEmbedUnimplementedProductOrderServer() {}

// UnsafeProductOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductOrderServer will
// result in compilation errors.
type UnsafeProductOrderServer interface {
	mustEmbedUnimplementedProductOrderServer()
}

func RegisterProductOrderServer(s grpc_go.ServiceRegistrar, srv ProductOrderServer) {
	s.RegisterService(&ProductOrder_ServiceDesc, srv)
}

func _ProductOrder_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetDetail", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

// ProductOrder_ServiceDesc is the grpc_go.ServiceDesc for ProductOrder service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductOrder_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "proto.ProductOrder",
	HandlerType: (*ProductOrderServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "GetDetail",
			Handler:    _ProductOrder_GetDetail_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "product_order.proto",
}

// ProductOrderAttributeClient is the client API for ProductOrderAttribute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductOrderAttributeClient interface {
	Query(ctx context.Context, in *QueryProductOrderAttributeRequest, opts ...grpc_go.CallOption) (*QueryProductOrderAttributeResponse, common.ErrorWithAttachment)
}

type productOrderAttributeClient struct {
	cc *triple.TripleConn
}

type ProductOrderAttributeClientImpl struct {
	Query func(ctx context.Context, in *QueryProductOrderAttributeRequest) (*QueryProductOrderAttributeResponse, error)
}

func (c *ProductOrderAttributeClientImpl) GetDubboStub(cc *triple.TripleConn) ProductOrderAttributeClient {
	return NewProductOrderAttributeClient(cc)
}

func (c *ProductOrderAttributeClientImpl) XXX_InterfaceName() string {
	return "proto.ProductOrderAttribute"
}

func NewProductOrderAttributeClient(cc *triple.TripleConn) ProductOrderAttributeClient {
	return &productOrderAttributeClient{cc}
}

func (c *productOrderAttributeClient) Query(ctx context.Context, in *QueryProductOrderAttributeRequest, opts ...grpc_go.CallOption) (*QueryProductOrderAttributeResponse, common.ErrorWithAttachment) {
	out := new(QueryProductOrderAttributeResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Query", in, out)
}

// ProductOrderAttributeServer is the server API for ProductOrderAttribute service.
// All implementations must embed UnimplementedProductOrderAttributeServer
// for forward compatibility
type ProductOrderAttributeServer interface {
	Query(context.Context, *QueryProductOrderAttributeRequest) (*QueryProductOrderAttributeResponse, error)
	mustEmbedUnimplementedProductOrderAttributeServer()
}

// UnimplementedProductOrderAttributeServer must be embedded to have forward compatible implementations.
type UnimplementedProductOrderAttributeServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedProductOrderAttributeServer) Query(context.Context, *QueryProductOrderAttributeRequest) (*QueryProductOrderAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (s *UnimplementedProductOrderAttributeServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedProductOrderAttributeServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedProductOrderAttributeServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &ProductOrderAttribute_ServiceDesc
}
func (s *UnimplementedProductOrderAttributeServer) XXX_InterfaceName() string {
	return "proto.ProductOrderAttribute"
}

func (UnimplementedProductOrderAttributeServer) mustEmbedUnimplementedProductOrderAttributeServer() {}

// UnsafeProductOrderAttributeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductOrderAttributeServer will
// result in compilation errors.
type UnsafeProductOrderAttributeServer interface {
	mustEmbedUnimplementedProductOrderAttributeServer()
}

func RegisterProductOrderAttributeServer(s grpc_go.ServiceRegistrar, srv ProductOrderAttributeServer) {
	s.RegisterService(&ProductOrderAttribute_ServiceDesc, srv)
}

func _ProductOrderAttribute_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductOrderAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Query", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

// ProductOrderAttribute_ServiceDesc is the grpc_go.ServiceDesc for ProductOrderAttribute service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductOrderAttribute_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "proto.ProductOrderAttribute",
	HandlerType: (*ProductOrderAttributeServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _ProductOrderAttribute_Query_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "product_order.proto",
}
