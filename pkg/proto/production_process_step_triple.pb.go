// Code generated by protoc-gen-go-triple. DO NOT EDIT.
// versions:
// - protoc-gen-go-triple v1.0.8
// - protoc             v3.21.12
// source: production_process_step.proto

package proto

import (
	context "context"
	protocol "dubbo.apache.org/dubbo-go/v3/protocol"
	dubbo3 "dubbo.apache.org/dubbo-go/v3/protocol/dubbo3"
	invocation "dubbo.apache.org/dubbo-go/v3/protocol/invocation"
	grpc_go "github.com/dubbogo/grpc-go"
	codes "github.com/dubbogo/grpc-go/codes"
	metadata "github.com/dubbogo/grpc-go/metadata"
	status "github.com/dubbogo/grpc-go/status"
	common "github.com/dubbogo/triple/pkg/common"
	constant "github.com/dubbogo/triple/pkg/common/constant"
	triple "github.com/dubbogo/triple/pkg/triple"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc_go.SupportPackageIsVersion7

// ProductionProcessStepClient is the client API for ProductionProcessStep service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductionProcessStepClient interface {
	Get(ctx context.Context, in *GetProductionProcessStepRequest, opts ...grpc_go.CallOption) (*GetProductionProcessStepDetailResponse, common.ErrorWithAttachment)
	Query(ctx context.Context, in *QueryProductionProcessStepRequest, opts ...grpc_go.CallOption) (*QueryProductionProcessStepResponse, common.ErrorWithAttachment)
}

type productionProcessStepClient struct {
	cc *triple.TripleConn
}

type ProductionProcessStepClientImpl struct {
	Get   func(ctx context.Context, in *GetProductionProcessStepRequest) (*GetProductionProcessStepDetailResponse, error)
	Query func(ctx context.Context, in *QueryProductionProcessStepRequest) (*QueryProductionProcessStepResponse, error)
}

func (c *ProductionProcessStepClientImpl) GetDubboStub(cc *triple.TripleConn) ProductionProcessStepClient {
	return NewProductionProcessStepClient(cc)
}

func (c *ProductionProcessStepClientImpl) XXX_InterfaceName() string {
	return "proto.ProductionProcessStep"
}

func NewProductionProcessStepClient(cc *triple.TripleConn) ProductionProcessStepClient {
	return &productionProcessStepClient{cc}
}

func (c *productionProcessStepClient) Get(ctx context.Context, in *GetProductionProcessStepRequest, opts ...grpc_go.CallOption) (*GetProductionProcessStepDetailResponse, common.ErrorWithAttachment) {
	out := new(GetProductionProcessStepDetailResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Get", in, out)
}

func (c *productionProcessStepClient) Query(ctx context.Context, in *QueryProductionProcessStepRequest, opts ...grpc_go.CallOption) (*QueryProductionProcessStepResponse, common.ErrorWithAttachment) {
	out := new(QueryProductionProcessStepResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Query", in, out)
}

// ProductionProcessStepServer is the server API for ProductionProcessStep service.
// All implementations must embed UnimplementedProductionProcessStepServer
// for forward compatibility
type ProductionProcessStepServer interface {
	Get(context.Context, *GetProductionProcessStepRequest) (*GetProductionProcessStepDetailResponse, error)
	Query(context.Context, *QueryProductionProcessStepRequest) (*QueryProductionProcessStepResponse, error)
	mustEmbedUnimplementedProductionProcessStepServer()
}

// UnimplementedProductionProcessStepServer must be embedded to have forward compatible implementations.
type UnimplementedProductionProcessStepServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedProductionProcessStepServer) Get(context.Context, *GetProductionProcessStepRequest) (*GetProductionProcessStepDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProductionProcessStepServer) Query(context.Context, *QueryProductionProcessStepRequest) (*QueryProductionProcessStepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (s *UnimplementedProductionProcessStepServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedProductionProcessStepServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedProductionProcessStepServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &ProductionProcessStep_ServiceDesc
}
func (s *UnimplementedProductionProcessStepServer) XXX_InterfaceName() string {
	return "proto.ProductionProcessStep"
}

func (UnimplementedProductionProcessStepServer) mustEmbedUnimplementedProductionProcessStepServer() {}

// UnsafeProductionProcessStepServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductionProcessStepServer will
// result in compilation errors.
type UnsafeProductionProcessStepServer interface {
	mustEmbedUnimplementedProductionProcessStepServer()
}

func RegisterProductionProcessStepServer(s grpc_go.ServiceRegistrar, srv ProductionProcessStepServer) {
	s.RegisterService(&ProductionProcessStep_ServiceDesc, srv)
}

func _ProductionProcessStep_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductionProcessStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Get", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductionProcessStep_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductionProcessStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Query", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

// ProductionProcessStep_ServiceDesc is the grpc_go.ServiceDesc for ProductionProcessStep service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductionProcessStep_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "proto.ProductionProcessStep",
	HandlerType: (*ProductionProcessStepServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ProductionProcessStep_Get_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _ProductionProcessStep_Query_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "production_process_step.proto",
}
