// Code generated by protoc-gen-go-triple. DO NOT EDIT.
// versions:
// - protoc-gen-go-triple v1.0.8
// - protoc             v3.21.12
// source: production_line.proto

package proto

import (
	context "context"
	protocol "dubbo.apache.org/dubbo-go/v3/protocol"
	dubbo3 "dubbo.apache.org/dubbo-go/v3/protocol/dubbo3"
	invocation "dubbo.apache.org/dubbo-go/v3/protocol/invocation"
	grpc_go "github.com/dubbogo/grpc-go"
	codes "github.com/dubbogo/grpc-go/codes"
	metadata "github.com/dubbogo/grpc-go/metadata"
	status "github.com/dubbogo/grpc-go/status"
	common "github.com/dubbogo/triple/pkg/common"
	constant "github.com/dubbogo/triple/pkg/common/constant"
	triple "github.com/dubbogo/triple/pkg/triple"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc_go.SupportPackageIsVersion7

// ProductionLineClient is the client API for ProductionLine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductionLineClient interface {
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc_go.CallOption) (*GetAllProductionLineResponse, common.ErrorWithAttachment)
	GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc_go.CallOption) (*GetProductionLineDetailResponse, common.ErrorWithAttachment)
}

type productionLineClient struct {
	cc *triple.TripleConn
}

type ProductionLineClientImpl struct {
	GetAll    func(ctx context.Context, in *GetAllRequest) (*GetAllProductionLineResponse, error)
	GetDetail func(ctx context.Context, in *GetDetailRequest) (*GetProductionLineDetailResponse, error)
}

func (c *ProductionLineClientImpl) GetDubboStub(cc *triple.TripleConn) ProductionLineClient {
	return NewProductionLineClient(cc)
}

func (c *ProductionLineClientImpl) XXX_InterfaceName() string {
	return "proto.ProductionLine"
}

func NewProductionLineClient(cc *triple.TripleConn) ProductionLineClient {
	return &productionLineClient{cc}
}

func (c *productionLineClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc_go.CallOption) (*GetAllProductionLineResponse, common.ErrorWithAttachment) {
	out := new(GetAllProductionLineResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetAll", in, out)
}

func (c *productionLineClient) GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc_go.CallOption) (*GetProductionLineDetailResponse, common.ErrorWithAttachment) {
	out := new(GetProductionLineDetailResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetDetail", in, out)
}

// ProductionLineServer is the server API for ProductionLine service.
// All implementations must embed UnimplementedProductionLineServer
// for forward compatibility
type ProductionLineServer interface {
	GetAll(context.Context, *GetAllRequest) (*GetAllProductionLineResponse, error)
	GetDetail(context.Context, *GetDetailRequest) (*GetProductionLineDetailResponse, error)
	mustEmbedUnimplementedProductionLineServer()
}

// UnimplementedProductionLineServer must be embedded to have forward compatible implementations.
type UnimplementedProductionLineServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedProductionLineServer) GetAll(context.Context, *GetAllRequest) (*GetAllProductionLineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedProductionLineServer) GetDetail(context.Context, *GetDetailRequest) (*GetProductionLineDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (s *UnimplementedProductionLineServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedProductionLineServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedProductionLineServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &ProductionLine_ServiceDesc
}
func (s *UnimplementedProductionLineServer) XXX_InterfaceName() string {
	return "proto.ProductionLine"
}

func (UnimplementedProductionLineServer) mustEmbedUnimplementedProductionLineServer() {}

// UnsafeProductionLineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductionLineServer will
// result in compilation errors.
type UnsafeProductionLineServer interface {
	mustEmbedUnimplementedProductionLineServer()
}

func RegisterProductionLineServer(s grpc_go.ServiceRegistrar, srv ProductionLineServer) {
	s.RegisterService(&ProductionLine_ServiceDesc, srv)
}

func _ProductionLine_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetAll", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductionLine_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetDetail", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

// ProductionLine_ServiceDesc is the grpc_go.ServiceDesc for ProductionLine service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductionLine_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "proto.ProductionLine",
	HandlerType: (*ProductionLineServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _ProductionLine_GetAll_Handler,
		},
		{
			MethodName: "GetDetail",
			Handler:    _ProductionLine_GetDetail_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "production_line.proto",
}

// ProductionStationClient is the client API for ProductionStation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductionStationClient interface {
	Update(ctx context.Context, in *ProductionStationInfo, opts ...grpc_go.CallOption) (*CommonResponse, common.ErrorWithAttachment)
	Get(ctx context.Context, in *GetProductionStationRequest, opts ...grpc_go.CallOption) (*GetProductionStationDetailResponse, common.ErrorWithAttachment)
}

type productionStationClient struct {
	cc *triple.TripleConn
}

type ProductionStationClientImpl struct {
	Update func(ctx context.Context, in *ProductionStationInfo) (*CommonResponse, error)
	Get    func(ctx context.Context, in *GetProductionStationRequest) (*GetProductionStationDetailResponse, error)
}

func (c *ProductionStationClientImpl) GetDubboStub(cc *triple.TripleConn) ProductionStationClient {
	return NewProductionStationClient(cc)
}

func (c *ProductionStationClientImpl) XXX_InterfaceName() string {
	return "proto.ProductionStation"
}

func NewProductionStationClient(cc *triple.TripleConn) ProductionStationClient {
	return &productionStationClient{cc}
}

func (c *productionStationClient) Update(ctx context.Context, in *ProductionStationInfo, opts ...grpc_go.CallOption) (*CommonResponse, common.ErrorWithAttachment) {
	out := new(CommonResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Update", in, out)
}

func (c *productionStationClient) Get(ctx context.Context, in *GetProductionStationRequest, opts ...grpc_go.CallOption) (*GetProductionStationDetailResponse, common.ErrorWithAttachment) {
	out := new(GetProductionStationDetailResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Get", in, out)
}

// ProductionStationServer is the server API for ProductionStation service.
// All implementations must embed UnimplementedProductionStationServer
// for forward compatibility
type ProductionStationServer interface {
	Update(context.Context, *ProductionStationInfo) (*CommonResponse, error)
	Get(context.Context, *GetProductionStationRequest) (*GetProductionStationDetailResponse, error)
	mustEmbedUnimplementedProductionStationServer()
}

// UnimplementedProductionStationServer must be embedded to have forward compatible implementations.
type UnimplementedProductionStationServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedProductionStationServer) Update(context.Context, *ProductionStationInfo) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProductionStationServer) Get(context.Context, *GetProductionStationRequest) (*GetProductionStationDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (s *UnimplementedProductionStationServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedProductionStationServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedProductionStationServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &ProductionStation_ServiceDesc
}
func (s *UnimplementedProductionStationServer) XXX_InterfaceName() string {
	return "proto.ProductionStation"
}

func (UnimplementedProductionStationServer) mustEmbedUnimplementedProductionStationServer() {}

// UnsafeProductionStationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductionStationServer will
// result in compilation errors.
type UnsafeProductionStationServer interface {
	mustEmbedUnimplementedProductionStationServer()
}

func RegisterProductionStationServer(s grpc_go.ServiceRegistrar, srv ProductionStationServer) {
	s.RegisterService(&ProductionStation_ServiceDesc, srv)
}

func _ProductionStation_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductionStationInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Update", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductionStation_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductionStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Get", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

// ProductionStation_ServiceDesc is the grpc_go.ServiceDesc for ProductionStation service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductionStation_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "proto.ProductionStation",
	HandlerType: (*ProductionStationServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _ProductionStation_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ProductionStation_Get_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "production_line.proto",
}

// ProductionProcessClient is the client API for ProductionProcess service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductionProcessClient interface {
	Query(ctx context.Context, in *QueryProductionProcessRequest, opts ...grpc_go.CallOption) (*QueryProductionProcessResponse, common.ErrorWithAttachment)
	GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc_go.CallOption) (*GetProductionProcessDetailResponse, common.ErrorWithAttachment)
}

type productionProcessClient struct {
	cc *triple.TripleConn
}

type ProductionProcessClientImpl struct {
	Query     func(ctx context.Context, in *QueryProductionProcessRequest) (*QueryProductionProcessResponse, error)
	GetDetail func(ctx context.Context, in *GetDetailRequest) (*GetProductionProcessDetailResponse, error)
}

func (c *ProductionProcessClientImpl) GetDubboStub(cc *triple.TripleConn) ProductionProcessClient {
	return NewProductionProcessClient(cc)
}

func (c *ProductionProcessClientImpl) XXX_InterfaceName() string {
	return "proto.ProductionProcess"
}

func NewProductionProcessClient(cc *triple.TripleConn) ProductionProcessClient {
	return &productionProcessClient{cc}
}

func (c *productionProcessClient) Query(ctx context.Context, in *QueryProductionProcessRequest, opts ...grpc_go.CallOption) (*QueryProductionProcessResponse, common.ErrorWithAttachment) {
	out := new(QueryProductionProcessResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Query", in, out)
}

func (c *productionProcessClient) GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc_go.CallOption) (*GetProductionProcessDetailResponse, common.ErrorWithAttachment) {
	out := new(GetProductionProcessDetailResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetDetail", in, out)
}

// ProductionProcessServer is the server API for ProductionProcess service.
// All implementations must embed UnimplementedProductionProcessServer
// for forward compatibility
type ProductionProcessServer interface {
	Query(context.Context, *QueryProductionProcessRequest) (*QueryProductionProcessResponse, error)
	GetDetail(context.Context, *GetDetailRequest) (*GetProductionProcessDetailResponse, error)
	mustEmbedUnimplementedProductionProcessServer()
}

// UnimplementedProductionProcessServer must be embedded to have forward compatible implementations.
type UnimplementedProductionProcessServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedProductionProcessServer) Query(context.Context, *QueryProductionProcessRequest) (*QueryProductionProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedProductionProcessServer) GetDetail(context.Context, *GetDetailRequest) (*GetProductionProcessDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (s *UnimplementedProductionProcessServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedProductionProcessServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedProductionProcessServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &ProductionProcess_ServiceDesc
}
func (s *UnimplementedProductionProcessServer) XXX_InterfaceName() string {
	return "proto.ProductionProcess"
}

func (UnimplementedProductionProcessServer) mustEmbedUnimplementedProductionProcessServer() {}

// UnsafeProductionProcessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductionProcessServer will
// result in compilation errors.
type UnsafeProductionProcessServer interface {
	mustEmbedUnimplementedProductionProcessServer()
}

func RegisterProductionProcessServer(s grpc_go.ServiceRegistrar, srv ProductionProcessServer) {
	s.RegisterService(&ProductionProcess_ServiceDesc, srv)
}

func _ProductionProcess_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductionProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Query", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductionProcess_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetDetail", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

// ProductionProcess_ServiceDesc is the grpc_go.ServiceDesc for ProductionProcess service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductionProcess_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "proto.ProductionProcess",
	HandlerType: (*ProductionProcessServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _ProductionProcess_Query_Handler,
		},
		{
			MethodName: "GetDetail",
			Handler:    _ProductionProcess_GetDetail_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "production_line.proto",
}

// ProcessStepParameterClient is the client API for ProcessStepParameter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessStepParameterClient interface {
	Query(ctx context.Context, in *QueryProcessStepParameterRequest, opts ...grpc_go.CallOption) (*QueryProcessStepParameterResponse, common.ErrorWithAttachment)
}

type processStepParameterClient struct {
	cc *triple.TripleConn
}

type ProcessStepParameterClientImpl struct {
	Query func(ctx context.Context, in *QueryProcessStepParameterRequest) (*QueryProcessStepParameterResponse, error)
}

func (c *ProcessStepParameterClientImpl) GetDubboStub(cc *triple.TripleConn) ProcessStepParameterClient {
	return NewProcessStepParameterClient(cc)
}

func (c *ProcessStepParameterClientImpl) XXX_InterfaceName() string {
	return "proto.ProcessStepParameter"
}

func NewProcessStepParameterClient(cc *triple.TripleConn) ProcessStepParameterClient {
	return &processStepParameterClient{cc}
}

func (c *processStepParameterClient) Query(ctx context.Context, in *QueryProcessStepParameterRequest, opts ...grpc_go.CallOption) (*QueryProcessStepParameterResponse, common.ErrorWithAttachment) {
	out := new(QueryProcessStepParameterResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Query", in, out)
}

// ProcessStepParameterServer is the server API for ProcessStepParameter service.
// All implementations must embed UnimplementedProcessStepParameterServer
// for forward compatibility
type ProcessStepParameterServer interface {
	Query(context.Context, *QueryProcessStepParameterRequest) (*QueryProcessStepParameterResponse, error)
	mustEmbedUnimplementedProcessStepParameterServer()
}

// UnimplementedProcessStepParameterServer must be embedded to have forward compatible implementations.
type UnimplementedProcessStepParameterServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedProcessStepParameterServer) Query(context.Context, *QueryProcessStepParameterRequest) (*QueryProcessStepParameterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (s *UnimplementedProcessStepParameterServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedProcessStepParameterServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedProcessStepParameterServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &ProcessStepParameter_ServiceDesc
}
func (s *UnimplementedProcessStepParameterServer) XXX_InterfaceName() string {
	return "proto.ProcessStepParameter"
}

func (UnimplementedProcessStepParameterServer) mustEmbedUnimplementedProcessStepParameterServer() {}

// UnsafeProcessStepParameterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessStepParameterServer will
// result in compilation errors.
type UnsafeProcessStepParameterServer interface {
	mustEmbedUnimplementedProcessStepParameterServer()
}

func RegisterProcessStepParameterServer(s grpc_go.ServiceRegistrar, srv ProcessStepParameterServer) {
	s.RegisterService(&ProcessStepParameter_ServiceDesc, srv)
}

func _ProcessStepParameter_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProcessStepParameterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Query", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

// ProcessStepParameter_ServiceDesc is the grpc_go.ServiceDesc for ProcessStepParameter service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProcessStepParameter_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "proto.ProcessStepParameter",
	HandlerType: (*ProcessStepParameterServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _ProcessStepParameter_Query_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "production_line.proto",
}

// ProductionProcessStepClient is the client API for ProductionProcessStep service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductionProcessStepClient interface {
	Get(ctx context.Context, in *GetProductionProcessStepRequest, opts ...grpc_go.CallOption) (*GetProductionProcessStepDetailResponse, common.ErrorWithAttachment)
	Query(ctx context.Context, in *QueryProductionProcessStepRequest, opts ...grpc_go.CallOption) (*QueryProductionProcessStepResponse, common.ErrorWithAttachment)
}

type productionProcessStepClient struct {
	cc *triple.TripleConn
}

type ProductionProcessStepClientImpl struct {
	Get   func(ctx context.Context, in *GetProductionProcessStepRequest) (*GetProductionProcessStepDetailResponse, error)
	Query func(ctx context.Context, in *QueryProductionProcessStepRequest) (*QueryProductionProcessStepResponse, error)
}

func (c *ProductionProcessStepClientImpl) GetDubboStub(cc *triple.TripleConn) ProductionProcessStepClient {
	return NewProductionProcessStepClient(cc)
}

func (c *ProductionProcessStepClientImpl) XXX_InterfaceName() string {
	return "proto.ProductionProcessStep"
}

func NewProductionProcessStepClient(cc *triple.TripleConn) ProductionProcessStepClient {
	return &productionProcessStepClient{cc}
}

func (c *productionProcessStepClient) Get(ctx context.Context, in *GetProductionProcessStepRequest, opts ...grpc_go.CallOption) (*GetProductionProcessStepDetailResponse, common.ErrorWithAttachment) {
	out := new(GetProductionProcessStepDetailResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Get", in, out)
}

func (c *productionProcessStepClient) Query(ctx context.Context, in *QueryProductionProcessStepRequest, opts ...grpc_go.CallOption) (*QueryProductionProcessStepResponse, common.ErrorWithAttachment) {
	out := new(QueryProductionProcessStepResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Query", in, out)
}

// ProductionProcessStepServer is the server API for ProductionProcessStep service.
// All implementations must embed UnimplementedProductionProcessStepServer
// for forward compatibility
type ProductionProcessStepServer interface {
	Get(context.Context, *GetProductionProcessStepRequest) (*GetProductionProcessStepDetailResponse, error)
	Query(context.Context, *QueryProductionProcessStepRequest) (*QueryProductionProcessStepResponse, error)
	mustEmbedUnimplementedProductionProcessStepServer()
}

// UnimplementedProductionProcessStepServer must be embedded to have forward compatible implementations.
type UnimplementedProductionProcessStepServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedProductionProcessStepServer) Get(context.Context, *GetProductionProcessStepRequest) (*GetProductionProcessStepDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProductionProcessStepServer) Query(context.Context, *QueryProductionProcessStepRequest) (*QueryProductionProcessStepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (s *UnimplementedProductionProcessStepServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedProductionProcessStepServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedProductionProcessStepServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &ProductionProcessStep_ServiceDesc
}
func (s *UnimplementedProductionProcessStepServer) XXX_InterfaceName() string {
	return "proto.ProductionProcessStep"
}

func (UnimplementedProductionProcessStepServer) mustEmbedUnimplementedProductionProcessStepServer() {}

// UnsafeProductionProcessStepServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductionProcessStepServer will
// result in compilation errors.
type UnsafeProductionProcessStepServer interface {
	mustEmbedUnimplementedProductionProcessStepServer()
}

func RegisterProductionProcessStepServer(s grpc_go.ServiceRegistrar, srv ProductionProcessStepServer) {
	s.RegisterService(&ProductionProcessStep_ServiceDesc, srv)
}

func _ProductionProcessStep_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductionProcessStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Get", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductionProcessStep_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductionProcessStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Query", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

// ProductionProcessStep_ServiceDesc is the grpc_go.ServiceDesc for ProductionProcessStep service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductionProcessStep_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "proto.ProductionProcessStep",
	HandlerType: (*ProductionProcessStepServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ProductionProcessStep_Get_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _ProductionProcessStep_Query_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "production_line.proto",
}
