// Code generated by protoc-gen-go-triple. DO NOT EDIT.
// versions:
// - protoc-gen-go-triple v1.0.8
// - protoc             v3.21.12
// source: product_test_record.proto

package proto

import (
	context "context"
	protocol "dubbo.apache.org/dubbo-go/v3/protocol"
	dubbo3 "dubbo.apache.org/dubbo-go/v3/protocol/dubbo3"
	invocation "dubbo.apache.org/dubbo-go/v3/protocol/invocation"
	grpc_go "github.com/dubbogo/grpc-go"
	codes "github.com/dubbogo/grpc-go/codes"
	metadata "github.com/dubbogo/grpc-go/metadata"
	status "github.com/dubbogo/grpc-go/status"
	common "github.com/dubbogo/triple/pkg/common"
	constant "github.com/dubbogo/triple/pkg/common/constant"
	triple "github.com/dubbogo/triple/pkg/triple"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc_go.SupportPackageIsVersion7

// ProductTestRecordClient is the client API for ProductTestRecord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductTestRecordClient interface {
	Add(ctx context.Context, in *ProductTestRecordInfo, opts ...grpc_go.CallOption) (*CommonResponse, common.ErrorWithAttachment)
}

type productTestRecordClient struct {
	cc *triple.TripleConn
}

type ProductTestRecordClientImpl struct {
	Add func(ctx context.Context, in *ProductTestRecordInfo) (*CommonResponse, error)
}

func (c *ProductTestRecordClientImpl) GetDubboStub(cc *triple.TripleConn) ProductTestRecordClient {
	return NewProductTestRecordClient(cc)
}

func (c *ProductTestRecordClientImpl) XXX_InterfaceName() string {
	return "proto.ProductTestRecord"
}

func NewProductTestRecordClient(cc *triple.TripleConn) ProductTestRecordClient {
	return &productTestRecordClient{cc}
}

func (c *productTestRecordClient) Add(ctx context.Context, in *ProductTestRecordInfo, opts ...grpc_go.CallOption) (*CommonResponse, common.ErrorWithAttachment) {
	out := new(CommonResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Add", in, out)
}

// ProductTestRecordServer is the server API for ProductTestRecord service.
// All implementations must embed UnimplementedProductTestRecordServer
// for forward compatibility
type ProductTestRecordServer interface {
	Add(context.Context, *ProductTestRecordInfo) (*CommonResponse, error)
	mustEmbedUnimplementedProductTestRecordServer()
}

// UnimplementedProductTestRecordServer must be embedded to have forward compatible implementations.
type UnimplementedProductTestRecordServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedProductTestRecordServer) Add(context.Context, *ProductTestRecordInfo) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (s *UnimplementedProductTestRecordServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedProductTestRecordServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedProductTestRecordServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &ProductTestRecord_ServiceDesc
}
func (s *UnimplementedProductTestRecordServer) XXX_InterfaceName() string {
	return "proto.ProductTestRecord"
}

func (UnimplementedProductTestRecordServer) mustEmbedUnimplementedProductTestRecordServer() {}

// UnsafeProductTestRecordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductTestRecordServer will
// result in compilation errors.
type UnsafeProductTestRecordServer interface {
	mustEmbedUnimplementedProductTestRecordServer()
}

func RegisterProductTestRecordServer(s grpc_go.ServiceRegistrar, srv ProductTestRecordServer) {
	s.RegisterService(&ProductTestRecord_ServiceDesc, srv)
}

func _ProductTestRecord_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductTestRecordInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Add", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

// ProductTestRecord_ServiceDesc is the grpc_go.ServiceDesc for ProductTestRecord service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductTestRecord_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "proto.ProductTestRecord",
	HandlerType: (*ProductTestRecordServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _ProductTestRecord_Add_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "product_test_record.proto",
}
